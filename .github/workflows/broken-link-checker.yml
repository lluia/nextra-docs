name: "Broken Link Checker"
on:
  push:
  pull_request:
    types: [opened, synchronize]

permissions:
  pull-requests: write

jobs:
  broken-link-checker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: corepack enable
      - run: |
          {
            echo 'OUTPUT<<EOF'
            echo "$(pnpx broken-link-checker -f -r https://authjs-nextra-docs.vercel.app)"
            echo EOF
          } >> "$GITHUB_OUTPUT"
        id: runLinkChecker
        name: "Run link checker"
        continue-on-error: true
      - name: Comment results on PR
        uses: actions/github-script@v7
        continue-on-error: true
        env:
          CHECKER_OUTPUT: ${{ steps.runLinkChecker.outputs.OUTPUT }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1a. Retrieve PRs
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${context.ref.replace('refs/heads/','')}`
            })
            const prNumber = pulls[0]?.number

            if (prNumber) {
              // 1b. Retrieve existing bot comments for the PR
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
              });

              const headline = `## Link Checker Results`
              const data = process.env.CHECKER_OUTPUT
              const output = `${headline}

              ${data}`

              const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes(headline)
              });

              // 3. Update previous comment so we have edit timeline
              if (botComment) {
                github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: output,
                });
              } else {
                github.rest.issues.createComment({
                  issue_number: prNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output,
                });
              }
            }
